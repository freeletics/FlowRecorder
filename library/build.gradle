apply plugin: 'java-library'
apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'

gradle.ext.isCiServer = System.getenv().containsKey("CI")
logger.warn("Running on CI: ${gradle.ext.isCiServer}")

if (gradle.ext.isCiServer) {
    apply plugin: "com.vanniktech.maven.publish"
    mavenPublish {
        targets {
            uploadArchives {
                releaseRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                snapshotRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            }
        }
    }
}

dependencies {
    //api libraries.kotlinStdlib
    api libraries.kotlinStdLibCommon
    api libraries.coroutines
    api 'org.jetbrains.kotlinx:kotlinx-coroutines-rx2:1.3.2'
    implementation libraries.rxJava
    implementation testLibraries.junit

    testImplementation testLibraries.junit
    testImplementation testLibraries.kotlintest
    testImplementation testLibraries.coroutinesTest
    testImplementation "com.github.akarnokd:kotlin-flow-extensions:0.0.2"
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs += ["-Xuse-experimental=kotlin.Experimental"]
    }
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}
